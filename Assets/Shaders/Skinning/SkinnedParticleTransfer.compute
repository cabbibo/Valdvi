
#pragma kernel Transfer

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};


  struct Particle{
   float3 pos;
   float3 vel;
   float3 nor;
   float3 tan;
   float2 uv;
   float life;
   float3 triIDs;
   float3 triWeights;
   float3 debug;

  };

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Particle> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
#include "../Chunks/safeID.cginc"
#include "../Chunks/hash.cginc"


float3 _CameraUp;
float3 _CameraLeft;
float _Radius;
float _RadiusRandomness;
float _SpawnSpeed;
float _Time;

float _EmitTime;
float _Emitting;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Particle p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float timeEmit = clamp(  (_Time -  _EmitTime) * .4 , 0 , 1);
    float timeEmit2 = clamp(  (_Time -  _EmitTime) * .4 , 0 , 1);


    float fEmit = lerp( 1-timeEmit , timeEmit2 , _Emitting );
    float3 fPos = p.pos + (l + u) * min((1-p.life)*_SpawnSpeed ,p.life) * fEmit *( _Radius + hash(float(pID)) * _RadiusRandomness);

    float2 fUV = float2( float(row) , float(col) );




    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( p.life , float(particleID) );

}

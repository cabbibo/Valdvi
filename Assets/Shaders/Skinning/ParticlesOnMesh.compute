#pragma kernel PlacePoint


  struct Vert{

  
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tang;
    float2 uv;
    float life;
    float3 triIDs;
    float3 triWeights;
    float3 debug;

  };

struct SkeletonVert{

  float3 pos;
  float3 nor;
  float3 tang;
  float2 uv;
  float life;

};


#include "../Chunks/snoise.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/curlNoise.cginc"

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<SkeletonVert> _SkeletonBuffer;

float4x4 _Transform;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PlacePoint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  Vert vert = _VertBuffer[pID];

  
  SkeletonVert v0 = _SkeletonBuffer[int(vert.triIDs.x)];
  SkeletonVert v1 = _SkeletonBuffer[int(vert.triIDs.y)];
  SkeletonVert v2 = _SkeletonBuffer[int(vert.triIDs.z)];


  float3 fPos  = v0.pos * vert.triWeights.x;
         fPos += v1.pos * vert.triWeights.y;
         fPos += v2.pos * vert.triWeights.z;

  float3 fNor  = v0.nor * vert.triWeights.x;
         fNor += v1.nor * vert.triWeights.y;
         fNor += v2.nor * vert.triWeights.z;

  float3 fTan  = v0.tang * vert.triWeights.x;
         fTan += v1.tang * vert.triWeights.y;
         fTan += v2.tang * vert.triWeights.z;


  float2 fUV  = v0.uv * vert.triWeights.x;
         fUV += v1.uv * vert.triWeights.y;
         fUV += v2.uv * vert.triWeights.z;



  vert.uv = fUV;

  vert.pos = mul(_Transform , float4(fPos,1)).xyz;
  vert.nor = mul(_Transform , float4(normalize(fNor),0)).xyz;
  vert.tang = mul(_Transform , float4(normalize(fTan),0)).xyz;
 

  _VertBuffer[pID] = vert;

}